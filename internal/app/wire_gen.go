// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"context"
	"fmt"
	clickhouse2 "github.com/ClickHouse/clickhouse-go/v2"
	"github.com/ClickHouse/clickhouse-go/v2/lib/driver"
	"prices/internal/broker"
	"prices/internal/config"
	"prices/internal/events"
	"prices/internal/infras/clickhouse"
	"prices/internal/usecases"
	"time"
)

// Injectors from wire.go:

func Init() (*App, func(), error) {
	configConfig := config.New()
	messageBroker, cleanup, err := initBroker(configConfig)
	if err != nil {
		return nil, nil, err
	}
	conn, cleanup2, err := initDB(configConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	itemsRepository := clickhouse.NewItemsRepository(conn)
	itemsUsecases := usecases.NewItemsUsecases(itemsRepository)
	validationHandler := events.NewValidationHandler(configConfig, itemsUsecases, messageBroker)
	app := NewApplication(messageBroker, validationHandler)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

func initDB(cfg *config.Config) (driver.Conn, func(), error) {
	conn, err := clickhouse2.Open(&clickhouse2.Options{
		Addr: []string{fmt.Sprintf("%s:%d", cfg.DB.Host, cfg.DB.Port)},
		Auth: clickhouse2.Auth{
			Database: cfg.DB.Name,
			Username: cfg.DB.User,
			Password: cfg.DB.Pass,
		},
		DialTimeout:     time.Second,
		MaxOpenConns:    10,
		MaxIdleConns:    5,
		ConnMaxLifetime: time.Hour,
	})
	if err != nil {
		return nil, nil, err
	}

	if err := conn.Ping(context.Background()); err != nil {
		return nil, func() {
			conn.Close()
		}, fmt.Errorf("cannot ping database")
	}

	return conn, func() {
		conn.Close()
	}, nil
}

func initBroker(cfg *config.Config) (broker.MessageBroker, func(), error) {
	mb, err := broker.New(cfg)
	if err != nil {
		return nil, nil, err
	}

	return mb, func() {
		mb.Close()
	}, nil
}
